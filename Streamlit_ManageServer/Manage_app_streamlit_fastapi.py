# –í–ê–ñ–ù–û!!! –ó–ê–ü–£–°–ö–ê–¢–¨ –ß–ï–†–ï–ó –¢–ï–†–ú–ò–ù–ê–õ. –∫–æ–º–∞–Ω–¥–∞: streamlit run Manage_app_streamlit_fastapi.py

import psutil
import streamlit as st
import requests
import time
import pandas as pd

# URL FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
API_URL = "http://localhost:8082"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö CPU –∏ RAM –∏ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
def get_metrics():
    # CPU –∏ RAM
    cpu_percent = psutil.cpu_percent(interval=1)
    ram_percent = psutil.virtual_memory().percent

    # –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    processes = {}
    for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']):
        processes[proc.info['name']] = {
            "cpu_percent": proc.info['cpu_percent'],
            "memory_percent": proc.info['memory_percent']
        }

    return {
        "cpu_percent": cpu_percent,
        "ram_percent": ram_percent,
        "processes": processes
    }


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª—É–∂–±–∞–º–∏ –Ω–∞ Windows
def manage_service(service_name, action):
    try:
        response = requests.post(f"{API_URL}/service/{action}", json={"service_name": service_name})
        if response.status_code == 200:
            return response.json()
        else:
            st.error("Failed to service")
            return None
    except requests.exceptions.RequestException as e:
        st.error(f"Error connecting to the server: {e}")
        return None


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
def main():
    st.set_page_config(page_title="Server Monitor", page_icon="üñ•Ô∏è", layout="wide")
    st.title("üñ•Ô∏è Server Monitoring")
    st.markdown("---")

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É–∂–±–∞–º–∏
    st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É–∂–±–∞–º–∏")
    service_name = st.text_input("–í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–ª—É–∂–±—ã:")
    action = st.selectbox("–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Å–ª—É–∂–±—ã", ["start", "stop", "state"])
    if st.button(f"{action} service"):
        result = manage_service(service_name, action)
        st.success(result)

    st.markdown("---")

    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
    cpu_metric = st.empty()
    ram_metric = st.empty()
    task_table = st.empty()

    st.markdown("---")

    # –¶–∏–∫–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    while True:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
        metrics = get_metrics()
        if metrics:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CPU
            with cpu_metric:
                st.subheader("CPU Usage")
                st.metric(label="CPU", value=f"{metrics['cpu_percent']}%")

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ RAM
            with ram_metric:
                st.subheader("RAM Usage")
                st.metric(label="RAM", value=f"{metrics['ram_percent']}%")

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ DataFrame
            processes = []
            for name, info in metrics['processes'].items():
                processes.append({
                    "Name": name,
                    "CPU (%)": info['cpu_percent'],
                    "RAM (%)": info['memory_percent']
                })
            task_df = pd.DataFrame(processes)

            # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            with task_table:
                st.subheader("Running Processes")
                st.dataframe(task_df, use_container_width=True)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏)
        time.sleep(2)


if __name__ == "__main__":
    main()


